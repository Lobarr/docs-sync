permissions:
  pull-requests: write
  packages: write
  contents: read
  id-token: write
on: push
name: workflow
env:
  TF_VAR_project_id: ${{ secrets.PROJECT_ID }}
  TF_VAR_location: ${{ secrets.LOCATION }}
  TF_VAR_service_account: ${{ secrets.SERVICE_ACCOUNT }}
jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from the repository
      - uses: actions/checkout@master

      # Set up a Python environment
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # Install dependencies
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv

      # Cache pipenv
      - name: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build the Docker image using the IMAGE_NAME environment variable
      - name: Build Docker image
        run: |
          IMAGE_NAME="ghcr.io/lobarr/docs-sync"
          TAG="${{ github.sha }}"
          echo "Image name: $IMAGE_NAME:$TAG"
          docker build -t $IMAGE_NAME:$TAG .
          docker push $IMAGE_NAME:$TAG

      - name: Authenticate to gcloud
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Setup a terraform enviornment
      - uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        run: |
          terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        run: |
          terraform init -backend-config="type=gcs" \
                -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
                -backend-config="prefix=tf/state" \

      - name: Terraform Validate
        run: |
          terraform validate -no-color

      - name: Terraform Plan
        run: |
          terraform plan -input=false -no-color -out tf.plan

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
