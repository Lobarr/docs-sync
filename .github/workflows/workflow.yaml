permissions:
  pull-requests: write
  packages: write
  contents: read
  id-token: write
on:
  - push
  - pull_request
name: workflow
env:
  BUCKET_NAME: docs-sync-tfstate
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  TF_VAR_credentials_0_email: ${{ secrets.CREDENTIALS_0_EMAIL }}
  TF_VAR_credentials_0_imap_server: ${{ secrets.CREDENTIALS_0_IMAP_SERVER }}
  TF_VAR_credentials_0_password: ${{ secrets.CREDENTIALS_0_PASSWORD }}
  TF_VAR_docs_sync_image: gcr.io/${{ secrets.PROJECT_ID }}/docs-sync:${{ github.sha }}
  TF_VAR_drive_api_token: ${{ secrets.DRIVE_API_TOKEN }}
  TF_VAR_folder_id: ${{ secrets.FOLDER_ID }}
  TF_VAR_location: ${{ secrets.LOCATION }}
  TF_VAR_mails_from_0: ${{ secrets.MAILS_FROM_0 }}
  TF_VAR_persist_to_firestore: ${{ secrets.PERSIST_TO_FIRESTORE }}
  TF_VAR_project_id: ${{ secrets.PROJECT_ID }}
  TF_VAR_service_account: ${{ secrets.SERVICE_ACCOUNT }}
  TF_VAR_upload_to_drive: ${{ secrets.UPLOAD_TO_DRIVE }}
jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from the repository
      - uses: actions/checkout@master

      - name: Authenticate to gcloud
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: "Show information about gcloud CLI"
        run: |
          gcloud auth configure-docker --quiet
          gcloud info

      # Set up a Python environment
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # Install dependencies
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv

      # Cache pipenv
      - name: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install

      # Build the Docker image using the TF_VAR_docs_sync_image environment variable
      - name: Build Docker image
        run: |
          echo "Image name: ${{ env.TF_VAR_docs_sync_image }}"
          docker build -t ${{ env.TF_VAR_docs_sync_image }} .

      - name: Push Docker image
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: docker push ${{ env.TF_VAR_docs_sync_image }}

      # Setup a terraform enviornment
      - uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: |
          terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          terraform init

      - name: Terraform Validate
        id: validate
        run: |
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -out tf.plan

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
            const d = new Date()

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>


            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            Timestamp: ${d.toUTCString()}

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -input=false tf.plan
